(this["webpackJsonpfuse-react-app"]=this["webpackJsonpfuse-react-app"]||[]).push([[110],{1321:function(e,a,t){"use strict";var n=t(1),o=t(5),i=t(0),l=(t(4),t(2)),c=t(8),r=i.forwardRef((function(e,a){var t=e.classes,c=e.className,r=e.dividers,s=void 0!==r&&r,d=Object(o.a)(e,["classes","className","dividers"]);return i.createElement("div",Object(n.a)({className:Object(l.default)(t.root,c,s&&t.dividers),ref:a},d))}));a.a=Object(c.a)((function(e){return{root:{flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"8px 24px","&:first-child":{paddingTop:20}},dividers:{padding:"16px 24px",borderTop:"1px solid ".concat(e.palette.divider),borderBottom:"1px solid ".concat(e.palette.divider)}}}),{name:"MuiDialogContent"})(r)},1327:function(e,a,t){"use strict";var n=t(1),o=t(5),i=t(0),l=(t(4),t(2)),c=t(8),r=i.forwardRef((function(e,a){var t=e.disableSpacing,c=void 0!==t&&t,r=e.classes,s=e.className,d=Object(o.a)(e,["disableSpacing","classes","className"]);return i.createElement("div",Object(n.a)({className:Object(l.default)(r.root,s,!c&&r.spacing),ref:a},d))}));a.a=Object(c.a)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",flex:"0 0 auto"},spacing:{"& > :not(:first-child)":{marginLeft:8}}},{name:"MuiDialogActions"})(r)},1366:function(e,a,t){"use strict";var n=t(1),o=t(5),i=t(0),l=(t(4),t(2)),c=t(8),r=t(201),s=i.forwardRef((function(e,a){var t=e.children,c=e.classes,s=e.className,d=e.disableTypography,m=void 0!==d&&d,p=Object(o.a)(e,["children","classes","className","disableTypography"]);return i.createElement("div",Object(n.a)({className:Object(l.default)(c.root,s),ref:a},p),m?t:i.createElement(r.a,{component:"h2",variant:"h6"},t))}));a.a=Object(c.a)({root:{margin:0,padding:"16px 24px",flex:"0 0 auto"}},{name:"MuiDialogTitle"})(s)},1395:function(e,a,t){"use strict";var n=t(1),o=t(0),i=(t(4),t(8)),l=t(201),c=o.forwardRef((function(e,a){return o.createElement(l.a,Object(n.a)({component:"p",variant:"body1",color:"textSecondary",ref:a},e))}));a.a=Object(i.a)({root:{marginBottom:12}},{name:"MuiDialogContentText"})(c)},2400:function(e,a,t){"use strict";t.r(a);var n=t(121),o=t(1251),i=t(1327),l=t(1321),c=t(1395),r=t(1366),s=t(201),d=t(0),m=t.n(d),p=t(6),g=t(282);a.default=function(e){const a=Object(p.c)();return m.a.createElement(m.a.Fragment,null,m.a.createElement(s.a,{variant:"h4",className:"mb-24"},"FuseDialog"),m.a.createElement(s.a,{className:"mb-16",component:"p"},m.a.createElement("code",null,"FuseDialog")," is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts."),m.a.createElement(s.a,{className:"mt-32 mb-8",variant:"h5"},"Usage"),m.a.createElement(s.a,{className:"mb-16",component:"p"},"You can show dialog anywhere with dispatching the action openDialog, it is using Material-UI's dialog so you can pass the props in the object:"),m.a.createElement(n.a,{component:"pre",className:"language-jsx"},'\n                        <Button\n                            onClick={()=> dispatch(openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id="alert-dialog-title">Use Google\'s location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id="alert-dialog-description">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={()=> dispatch(closeDialog())} color="primary">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={()=> dispatch(closeDialog())} color="primary" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                     )\n                                 }))}\n                            variant="contained"\n                            color="secondary"\n                        >\n                            Open Dialog\n                        </Button>\n                        '),m.a.createElement(s.a,{className:"mt-32 mb-8",variant:"h5"},"Example"),m.a.createElement(o.a,{onClick:()=>a(Object(g.c)({children:m.a.createElement(m.a.Fragment,null,m.a.createElement(r.a,{id:"alert-dialog-title"},"Use Google's location service?"),m.a.createElement(l.a,null,m.a.createElement(c.a,{id:"alert-dialog-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),m.a.createElement(i.a,null,m.a.createElement(o.a,{onClick:()=>a(Object(g.a)()),color:"primary"},"Disagree"),m.a.createElement(o.a,{onClick:()=>a(Object(g.a)()),color:"primary",autoFocus:!0},"Agree")))})),variant:"contained",color:"secondary"},"Open Dialog"))}}}]);